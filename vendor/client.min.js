var oms=function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=124)}([function(t,e,r){var n=r(29),o="object"==typeof self&&self&&self.Object===Object&&self,i=n||o||Function("return this")();t.exports=i},function(t,e,r){var n=r(60),o=r(65);t.exports=function(t,e){var r=o(t,e);return n(r)?r:void 0}},function(t,e){t.exports=function(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}},function(t,e){t.exports=function(t){return null!=t&&"object"==typeof t}},function(t,e,r){var n=r(48);t.exports=function(t){return n(t,5)}},function(t,e,r){var n=r(50),o=r(51),i=r(52),s=r(53),a=r(54);function c(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}c.prototype.clear=n,c.prototype.delete=o,c.prototype.get=i,c.prototype.has=s,c.prototype.set=a,t.exports=c},function(t,e,r){var n=r(27);t.exports=function(t,e){for(var r=t.length;r--;)if(n(t[r][0],e))return r;return-1}},function(t,e,r){var n=r(17),o=r(61),i=r(62),s=n?n.toStringTag:void 0;t.exports=function(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":s&&s in Object(t)?o(t):i(t)}},function(t,e,r){var n=r(1)(Object,"create");t.exports=n},function(t,e,r){var n=r(75);t.exports=function(t,e){var r=t.__data__;return n(e)?r["string"==typeof e?"string":"hash"]:r.map}},function(t,e,r){var n=r(32),o=r(33);t.exports=function(t,e,r,i){var s=!r;r||(r={});for(var a=-1,c=e.length;++a<c;){var u=e[a],f=i?i(r[u],t[u],u,r,t):void 0;void 0===f&&(f=t[u]),s?o(r,u,f):n(r,u,f)}return r}},function(t,e){var r=Array.isArray;t.exports=r},function(t,e){var r=Object.prototype;t.exports=function(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||r)}},function(t,e,r){var n=r(98),o=r(16),i=r(99),s=r(100),a=r(101),c=r(7),u=r(31),f=u(n),h=u(o),p=u(i),l=u(s),d=u(a),y=c;(n&&"[object DataView]"!=y(new n(new ArrayBuffer(1)))||o&&"[object Map]"!=y(new o)||i&&"[object Promise]"!=y(i.resolve())||s&&"[object Set]"!=y(new s)||a&&"[object WeakMap]"!=y(new a))&&(y=function(t){var e=c(t),r="[object Object]"==e?t.constructor:void 0,n=r?u(r):"";if(n)switch(n){case f:return"[object DataView]";case h:return"[object Map]";case p:return"[object Promise]";case l:return"[object Set]";case d:return"[object WeakMap]"}return e}),t.exports=y},function(t,e,r){var n=r(38),o=r(13),i=r(35),s=r(11),a=r(23),c=r(19),u=r(12),f=r(36),h=Object.prototype.hasOwnProperty;t.exports=function(t){if(null==t)return!0;if(a(t)&&(s(t)||"string"==typeof t||"function"==typeof t.splice||c(t)||f(t)||i(t)))return!t.length;var e=o(t);if("[object Map]"==e||"[object Set]"==e)return!t.size;if(u(t))return!n(t).length;for(var r in t)if(h.call(t,r))return!1;return!0}},function(t,e,r){"use strict";const{v4:n,v6:o}=r(122),i=n({exact:!0}),s=o({exact:!0});t.exports=t=>i.test(t)?4:s.test(t)?6:0,t.exports.v4=t=>i.test(t),t.exports.v6=t=>s.test(t)},function(t,e,r){var n=r(1)(r(0),"Map");t.exports=n},function(t,e,r){var n=r(0).Symbol;t.exports=n},function(t,e,r){var n=r(34),o=r(38),i=r(23);t.exports=function(t){return i(t)?n(t):o(t)}},function(t,e,r){(function(t){var n=r(0),o=r(84),i=e&&!e.nodeType&&e,s=i&&"object"==typeof t&&t&&!t.nodeType&&t,a=s&&s.exports===i?n.Buffer:void 0,c=(a?a.isBuffer:void 0)||o;t.exports=c}).call(this,r(20)(t))},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e){t.exports=function(t){return function(e){return t(e)}}},function(t,e,r){(function(t){var n=r(29),o=e&&!e.nodeType&&e,i=o&&"object"==typeof t&&t&&!t.nodeType&&t,s=i&&i.exports===o&&n.process,a=function(){try{var t=i&&i.require&&i.require("util").types;return t||s&&s.binding&&s.binding("util")}catch(t){}}();t.exports=a}).call(this,r(20)(t))},function(t,e,r){var n=r(28),o=r(37);t.exports=function(t){return null!=t&&o(t.length)&&!n(t)}},function(t,e,r){var n=r(34),o=r(89),i=r(23);t.exports=function(t){return i(t)?n(t,!0):o(t)}},function(t,e,r){var n=r(94),o=r(40),i=Object.prototype.propertyIsEnumerable,s=Object.getOwnPropertySymbols,a=s?function(t){return null==t?[]:(t=Object(t),n(s(t),(function(e){return i.call(t,e)})))}:o;t.exports=a},function(t,e,r){var n=r(104);t.exports=function(t){var e=new t.constructor(t.byteLength);return new n(e).set(new n(t)),e}},function(t,e){t.exports=function(t,e){return t===e||t!=t&&e!=e}},function(t,e,r){var n=r(7),o=r(2);t.exports=function(t){if(!o(t))return!1;var e=n(t);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}},function(t,e,r){(function(e){var r="object"==typeof e&&e&&e.Object===Object&&e;t.exports=r}).call(this,r(30))},function(t,e){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(t){"object"==typeof window&&(r=window)}t.exports=r},function(t,e){var r=Function.prototype.toString;t.exports=function(t){if(null!=t){try{return r.call(t)}catch(t){}try{return t+""}catch(t){}}return""}},function(t,e,r){var n=r(33),o=r(27),i=Object.prototype.hasOwnProperty;t.exports=function(t,e,r){var s=t[e];i.call(t,e)&&o(s,r)&&(void 0!==r||e in t)||n(t,e,r)}},function(t,e,r){var n=r(80);t.exports=function(t,e,r){"__proto__"==e&&n?n(t,e,{configurable:!0,enumerable:!0,value:r,writable:!0}):t[e]=r}},function(t,e,r){var n=r(82),o=r(35),i=r(11),s=r(19),a=r(85),c=r(36),u=Object.prototype.hasOwnProperty;t.exports=function(t,e){var r=i(t),f=!r&&o(t),h=!r&&!f&&s(t),p=!r&&!f&&!h&&c(t),l=r||f||h||p,d=l?n(t.length,String):[],y=d.length;for(var v in t)!e&&!u.call(t,v)||l&&("length"==v||h&&("offset"==v||"parent"==v)||p&&("buffer"==v||"byteLength"==v||"byteOffset"==v)||a(v,y))||d.push(v);return d}},function(t,e,r){var n=r(83),o=r(3),i=Object.prototype,s=i.hasOwnProperty,a=i.propertyIsEnumerable,c=n(function(){return arguments}())?n:function(t){return o(t)&&s.call(t,"callee")&&!a.call(t,"callee")};t.exports=c},function(t,e,r){var n=r(86),o=r(21),i=r(22),s=i&&i.isTypedArray,a=s?o(s):n;t.exports=a},function(t,e){t.exports=function(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=9007199254740991}},function(t,e,r){var n=r(12),o=r(87),i=Object.prototype.hasOwnProperty;t.exports=function(t){if(!n(t))return o(t);var e=[];for(var r in Object(t))i.call(t,r)&&"constructor"!=r&&e.push(r);return e}},function(t,e){t.exports=function(t,e){return function(r){return t(e(r))}}},function(t,e){t.exports=function(){return[]}},function(t,e,r){var n=r(42),o=r(43),i=r(25),s=r(40),a=Object.getOwnPropertySymbols?function(t){for(var e=[];t;)n(e,i(t)),t=o(t);return e}:s;t.exports=a},function(t,e){t.exports=function(t,e){for(var r=-1,n=e.length,o=t.length;++r<n;)t[o+r]=e[r];return t}},function(t,e,r){var n=r(39)(Object.getPrototypeOf,Object);t.exports=n},function(t,e,r){var n=r(42),o=r(11);t.exports=function(t,e,r){var i=e(t);return o(t)?i:n(i,r(t))}},function(t,e,r){"use strict";const n=r(115),o=r(116),i=r(117);function s(t){if("string"!=typeof t||1!==t.length)throw new TypeError("arrayFormatSeparator must be single character string")}function a(t,e){return e.encode?e.strict?n(t):encodeURIComponent(t):t}function c(t,e){return e.decode?o(t):t}function u(t){const e=t.indexOf("#");return-1!==e&&(t=t.slice(0,e)),t}function f(t){const e=(t=u(t)).indexOf("?");return-1===e?"":t.slice(e+1)}function h(t,e){return e.parseNumbers&&!Number.isNaN(Number(t))&&"string"==typeof t&&""!==t.trim()?t=Number(t):!e.parseBooleans||null===t||"true"!==t.toLowerCase()&&"false"!==t.toLowerCase()||(t="true"===t.toLowerCase()),t}function p(t,e){s((e=Object.assign({decode:!0,sort:!0,arrayFormat:"none",arrayFormatSeparator:",",parseNumbers:!1,parseBooleans:!1},e)).arrayFormatSeparator);const r=function(t){let e;switch(t.arrayFormat){case"index":return(t,r,n)=>{e=/\[(\d*)\]$/.exec(t),t=t.replace(/\[\d*\]$/,""),e?(void 0===n[t]&&(n[t]={}),n[t][e[1]]=r):n[t]=r};case"bracket":return(t,r,n)=>{e=/(\[\])$/.exec(t),t=t.replace(/\[\]$/,""),e?void 0!==n[t]?n[t]=[].concat(n[t],r):n[t]=[r]:n[t]=r};case"comma":case"separator":return(e,r,n)=>{const o="string"==typeof r&&r.split("").indexOf(t.arrayFormatSeparator)>-1?r.split(t.arrayFormatSeparator).map(e=>c(e,t)):null===r?r:c(r,t);n[e]=o};default:return(t,e,r)=>{void 0!==r[t]?r[t]=[].concat(r[t],e):r[t]=e}}}(e),n=Object.create(null);if("string"!=typeof t)return n;if(!(t=t.trim().replace(/^[?#&]/,"")))return n;for(const o of t.split("&")){let[t,s]=i(e.decode?o.replace(/\+/g," "):o,"=");s=void 0===s?null:["comma","separator"].includes(e.arrayFormat)?s:c(s,e),r(c(t,e),s,n)}for(const t of Object.keys(n)){const r=n[t];if("object"==typeof r&&null!==r)for(const t of Object.keys(r))r[t]=h(r[t],e);else n[t]=h(r,e)}return!1===e.sort?n:(!0===e.sort?Object.keys(n).sort():Object.keys(n).sort(e.sort)).reduce((t,e)=>{const r=n[e];return Boolean(r)&&"object"==typeof r&&!Array.isArray(r)?t[e]=function t(e){return Array.isArray(e)?e.sort():"object"==typeof e?t(Object.keys(e)).sort((t,e)=>Number(t)-Number(e)).map(t=>e[t]):e}(r):t[e]=r,t},Object.create(null))}e.extract=f,e.parse=p,e.stringify=(t,e)=>{if(!t)return"";s((e=Object.assign({encode:!0,strict:!0,arrayFormat:"none",arrayFormatSeparator:","},e)).arrayFormatSeparator);const r=r=>e.skipNull&&null==t[r]||e.skipEmptyString&&""===t[r],n=function(t){switch(t.arrayFormat){case"index":return e=>(r,n)=>{const o=r.length;return void 0===n||t.skipNull&&null===n||t.skipEmptyString&&""===n?r:null===n?[...r,[a(e,t),"[",o,"]"].join("")]:[...r,[a(e,t),"[",a(o,t),"]=",a(n,t)].join("")]};case"bracket":return e=>(r,n)=>void 0===n||t.skipNull&&null===n||t.skipEmptyString&&""===n?r:null===n?[...r,[a(e,t),"[]"].join("")]:[...r,[a(e,t),"[]=",a(n,t)].join("")];case"comma":case"separator":return e=>(r,n)=>null==n||0===n.length?r:0===r.length?[[a(e,t),"=",a(n,t)].join("")]:[[r,a(n,t)].join(t.arrayFormatSeparator)];default:return e=>(r,n)=>void 0===n||t.skipNull&&null===n||t.skipEmptyString&&""===n?r:null===n?[...r,a(e,t)]:[...r,[a(e,t),"=",a(n,t)].join("")]}}(e),o={};for(const e of Object.keys(t))r(e)||(o[e]=t[e]);const i=Object.keys(o);return!1!==e.sort&&i.sort(e.sort),i.map(r=>{const o=t[r];return void 0===o?"":null===o?a(r,e):Array.isArray(o)?o.reduce(n(r),[]).join("&"):a(r,e)+"="+a(o,e)}).filter(t=>t.length>0).join("&")},e.parseUrl=(t,e)=>{e=Object.assign({decode:!0},e);const[r,n]=i(t,"#");return Object.assign({url:r.split("?")[0]||"",query:p(f(t),e)},e&&e.parseFragmentIdentifier&&n?{fragmentIdentifier:c(n,e)}:{})},e.stringifyUrl=(t,r)=>{r=Object.assign({encode:!0,strict:!0},r);const n=u(t.url).split("?")[0]||"",o=e.extract(t.url),i=e.parse(o,{sort:!1}),s=Object.assign(i,t.query);let c=e.stringify(s,r);c&&(c="?"+c);let f=function(t){let e="";const r=t.indexOf("#");return-1!==r&&(e=t.slice(r)),e}(t.url);return t.fragmentIdentifier&&(f="#"+a(t.fragmentIdentifier,r)),`${n}${c}${f}`}},function(t,e,r){var n;void 0===(n=function(){return function(){var t=r;t.Integer={type:"integer"};var e={String:String,Boolean:Boolean,Number:Number,Object:Object,Array:Array,Date:Date};function r(t,e){return r(t,e,{changing:!1})}t.validate=r,t.checkPropertyChange=function(t,e,n){return r(t,e,{changing:n||"property"})};var r=t._validate=function(t,r,n){n||(n={});var o=n.changing;function i(t){return t.type||e[t.name]==t&&t.name.toLowerCase()}var s=[];function a(t,e,r,c){var u;function f(t){s.push({property:r,message:t})}if(r+=r?"number"==typeof c?"["+c+"]":void 0===c?"":"."+c:c,("object"!=typeof e||e instanceof Array)&&(r||"function"!=typeof e)&&(!e||!i(e)))return"function"==typeof e?t instanceof e||f("is not an instance of the class/constructor "+e.name):e&&f("Invalid schema/property definition "+e),null;function h(t,e){if(t){if(!("string"!=typeof t||"any"==t||("null"==t?null===e:typeof e==t)||e instanceof Array&&"array"==t||e instanceof Date&&"date"==t||"integer"==t&&e%1==0))return[{property:r,message:typeof e+" value found, but a "+t+" is required"}];if(t instanceof Array){for(var n=[],o=0;o<t.length&&(n=h(t[o],e)).length;o++);if(n.length)return n}else if("object"==typeof t){var i=s;s=[],a(e,t,r);var c=s;return s=i,c}}return[]}if(o&&e.readonly&&f("is a readonly field, it can not be changed"),e.extends&&a(t,e.extends,r,c),void 0===t)e.required&&f("is missing and it is required");else if(s=s.concat(h(i(e),t)),e.disallow&&!h(e.disallow,t).length&&f(" disallowed value was matched"),null!==t){if(t instanceof Array){if(e.items){var p=e.items instanceof Array,l=e.items;for(c=0,u=t.length;c<u;c+=1)p&&(l=e.items[c]),n.coerce&&(t[c]=n.coerce(t[c],l)),s.concat(a(t[c],l,r,c))}e.minItems&&t.length<e.minItems&&f("There must be a minimum of "+e.minItems+" in the array"),e.maxItems&&t.length>e.maxItems&&f("There must be a maximum of "+e.maxItems+" in the array")}else(e.properties||e.additionalProperties)&&s.concat(function(t,e,r,i){if("object"==typeof e)for(var c in("object"!=typeof t||t instanceof Array)&&s.push({property:r,message:"an object is required"}),e)if(e.hasOwnProperty(c)){var u=t[c];if(void 0===u&&n.existingOnly)continue;var f=e[c];void 0===u&&f.default&&(u=t[c]=f.default),n.coerce&&c in t&&(u=t[c]=n.coerce(u,f)),a(u,f,r,c)}for(c in t){if(t.hasOwnProperty(c)&&("_"!=c.charAt(0)||"_"!=c.charAt(1))&&e&&!e[c]&&!1===i){if(n.filter){delete t[c];continue}s.push({property:r,message:typeof u+"The property "+c+" is not defined in the schema and the schema does not allow additional properties"})}var h=e&&e[c]&&e[c].requires;h&&!(h in t)&&s.push({property:r,message:"the presence of the property "+c+" requires that "+h+" also be present"}),u=t[c],!i||e&&"object"==typeof e&&c in e||(n.coerce&&(u=t[c]=n.coerce(u,i)),a(u,i,r,c)),!o&&u&&u.$schema&&(s=s.concat(a(u,u.$schema,r,c)))}return s}(t,e.properties,r,e.additionalProperties));if(e.pattern&&"string"==typeof t&&!t.match(e.pattern)&&f("does not match the regex pattern "+e.pattern),e.maxLength&&"string"==typeof t&&t.length>e.maxLength&&f("may only be "+e.maxLength+" characters long"),e.minLength&&"string"==typeof t&&t.length<e.minLength&&f("must be at least "+e.minLength+" characters long"),void 0!==typeof e.minimum&&typeof t==typeof e.minimum&&e.minimum>t&&f("must have a minimum value of "+e.minimum),void 0!==typeof e.maximum&&typeof t==typeof e.maximum&&e.maximum<t&&f("must have a maximum value of "+e.maximum),e.enum){var d,y=e.enum;u=y.length;for(var v=0;v<u;v++)if(y[v]===t){d=1;break}d||f("does not have a value in the enumeration "+y.join(", "))}"number"==typeof e.maxDecimal&&t.toString().match(new RegExp("\\.[0-9]{"+(e.maxDecimal+1)+",}"))&&f("may only have "+e.maxDecimal+" digits of decimal places")}return null}return r&&a(t,r,"",o||""),!o&&t&&t.$schema&&a(t,t.$schema,"",""),{valid:!s.length,errors:s}};return t.mustBeValid=function(t){if(!t.valid)throw new TypeError(t.errors.map((function(t){return"for property "+t.property+": "+t.message})).join(", \n"))},t}()}.apply(e,[]))||(t.exports=n)},function(module,exports,__webpack_require__){(function(process,global){var __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * [js-sha256]{@link https://github.com/emn178/js-sha256}
 *
 * @version 0.9.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2014-2017
 * @license MIT
 */!function(){"use strict";var ERROR="input is invalid type",WINDOW="object"==typeof window,root=WINDOW?window:{};root.JS_SHA256_NO_WINDOW&&(WINDOW=!1);var WEB_WORKER=!WINDOW&&"object"==typeof self,NODE_JS=!root.JS_SHA256_NO_NODE_JS&&"object"==typeof process&&process.versions&&process.versions.node;NODE_JS?root=global:WEB_WORKER&&(root=self);var COMMON_JS=!root.JS_SHA256_NO_COMMON_JS&&"object"==typeof module&&module.exports,AMD=__webpack_require__(121),ARRAY_BUFFER=!root.JS_SHA256_NO_ARRAY_BUFFER&&"undefined"!=typeof ArrayBuffer,HEX_CHARS="0123456789abcdef".split(""),EXTRA=[-2147483648,8388608,32768,128],SHIFT=[24,16,8,0],K=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],OUTPUT_TYPES=["hex","array","digest","arrayBuffer"],blocks=[];!root.JS_SHA256_NO_NODE_JS&&Array.isArray||(Array.isArray=function(t){return"[object Array]"===Object.prototype.toString.call(t)}),!ARRAY_BUFFER||!root.JS_SHA256_NO_ARRAY_BUFFER_IS_VIEW&&ArrayBuffer.isView||(ArrayBuffer.isView=function(t){return"object"==typeof t&&t.buffer&&t.buffer.constructor===ArrayBuffer});var createOutputMethod=function(t,e){return function(r){return new Sha256(e,!0).update(r)[t]()}},createMethod=function(t){var e=createOutputMethod("hex",t);NODE_JS&&(e=nodeWrap(e,t)),e.create=function(){return new Sha256(t)},e.update=function(t){return e.create().update(t)};for(var r=0;r<OUTPUT_TYPES.length;++r){var n=OUTPUT_TYPES[r];e[n]=createOutputMethod(n,t)}return e},nodeWrap=function(method,is224){var crypto=eval("require('crypto')"),Buffer=eval("require('buffer').Buffer"),algorithm=is224?"sha224":"sha256",nodeMethod=function(t){if("string"==typeof t)return crypto.createHash(algorithm).update(t,"utf8").digest("hex");if(null==t)throw new Error(ERROR);return t.constructor===ArrayBuffer&&(t=new Uint8Array(t)),Array.isArray(t)||ArrayBuffer.isView(t)||t.constructor===Buffer?crypto.createHash(algorithm).update(new Buffer(t)).digest("hex"):method(t)};return nodeMethod},createHmacOutputMethod=function(t,e){return function(r,n){return new HmacSha256(r,e,!0).update(n)[t]()}},createHmacMethod=function(t){var e=createHmacOutputMethod("hex",t);e.create=function(e){return new HmacSha256(e,t)},e.update=function(t,r){return e.create(t).update(r)};for(var r=0;r<OUTPUT_TYPES.length;++r){var n=OUTPUT_TYPES[r];e[n]=createHmacOutputMethod(n,t)}return e};function Sha256(t,e){e?(blocks[0]=blocks[16]=blocks[1]=blocks[2]=blocks[3]=blocks[4]=blocks[5]=blocks[6]=blocks[7]=blocks[8]=blocks[9]=blocks[10]=blocks[11]=blocks[12]=blocks[13]=blocks[14]=blocks[15]=0,this.blocks=blocks):this.blocks=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],t?(this.h0=3238371032,this.h1=914150663,this.h2=812702999,this.h3=4144912697,this.h4=4290775857,this.h5=1750603025,this.h6=1694076839,this.h7=3204075428):(this.h0=1779033703,this.h1=3144134277,this.h2=1013904242,this.h3=2773480762,this.h4=1359893119,this.h5=2600822924,this.h6=528734635,this.h7=1541459225),this.block=this.start=this.bytes=this.hBytes=0,this.finalized=this.hashed=!1,this.first=!0,this.is224=t}function HmacSha256(t,e,r){var n,o=typeof t;if("string"===o){var i,s=[],a=t.length,c=0;for(n=0;n<a;++n)(i=t.charCodeAt(n))<128?s[c++]=i:i<2048?(s[c++]=192|i>>6,s[c++]=128|63&i):i<55296||i>=57344?(s[c++]=224|i>>12,s[c++]=128|i>>6&63,s[c++]=128|63&i):(i=65536+((1023&i)<<10|1023&t.charCodeAt(++n)),s[c++]=240|i>>18,s[c++]=128|i>>12&63,s[c++]=128|i>>6&63,s[c++]=128|63&i);t=s}else{if("object"!==o)throw new Error(ERROR);if(null===t)throw new Error(ERROR);if(ARRAY_BUFFER&&t.constructor===ArrayBuffer)t=new Uint8Array(t);else if(!(Array.isArray(t)||ARRAY_BUFFER&&ArrayBuffer.isView(t)))throw new Error(ERROR)}t.length>64&&(t=new Sha256(e,!0).update(t).array());var u=[],f=[];for(n=0;n<64;++n){var h=t[n]||0;u[n]=92^h,f[n]=54^h}Sha256.call(this,e,r),this.update(f),this.oKeyPad=u,this.inner=!0,this.sharedMemory=r}Sha256.prototype.update=function(t){if(!this.finalized){var e,r=typeof t;if("string"!==r){if("object"!==r)throw new Error(ERROR);if(null===t)throw new Error(ERROR);if(ARRAY_BUFFER&&t.constructor===ArrayBuffer)t=new Uint8Array(t);else if(!(Array.isArray(t)||ARRAY_BUFFER&&ArrayBuffer.isView(t)))throw new Error(ERROR);e=!0}for(var n,o,i=0,s=t.length,a=this.blocks;i<s;){if(this.hashed&&(this.hashed=!1,a[0]=this.block,a[16]=a[1]=a[2]=a[3]=a[4]=a[5]=a[6]=a[7]=a[8]=a[9]=a[10]=a[11]=a[12]=a[13]=a[14]=a[15]=0),e)for(o=this.start;i<s&&o<64;++i)a[o>>2]|=t[i]<<SHIFT[3&o++];else for(o=this.start;i<s&&o<64;++i)(n=t.charCodeAt(i))<128?a[o>>2]|=n<<SHIFT[3&o++]:n<2048?(a[o>>2]|=(192|n>>6)<<SHIFT[3&o++],a[o>>2]|=(128|63&n)<<SHIFT[3&o++]):n<55296||n>=57344?(a[o>>2]|=(224|n>>12)<<SHIFT[3&o++],a[o>>2]|=(128|n>>6&63)<<SHIFT[3&o++],a[o>>2]|=(128|63&n)<<SHIFT[3&o++]):(n=65536+((1023&n)<<10|1023&t.charCodeAt(++i)),a[o>>2]|=(240|n>>18)<<SHIFT[3&o++],a[o>>2]|=(128|n>>12&63)<<SHIFT[3&o++],a[o>>2]|=(128|n>>6&63)<<SHIFT[3&o++],a[o>>2]|=(128|63&n)<<SHIFT[3&o++]);this.lastByteIndex=o,this.bytes+=o-this.start,o>=64?(this.block=a[16],this.start=o-64,this.hash(),this.hashed=!0):this.start=o}return this.bytes>4294967295&&(this.hBytes+=this.bytes/4294967296<<0,this.bytes=this.bytes%4294967296),this}},Sha256.prototype.finalize=function(){if(!this.finalized){this.finalized=!0;var t=this.blocks,e=this.lastByteIndex;t[16]=this.block,t[e>>2]|=EXTRA[3&e],this.block=t[16],e>=56&&(this.hashed||this.hash(),t[0]=this.block,t[16]=t[1]=t[2]=t[3]=t[4]=t[5]=t[6]=t[7]=t[8]=t[9]=t[10]=t[11]=t[12]=t[13]=t[14]=t[15]=0),t[14]=this.hBytes<<3|this.bytes>>>29,t[15]=this.bytes<<3,this.hash()}},Sha256.prototype.hash=function(){var t,e,r,n,o,i,s,a,c,u=this.h0,f=this.h1,h=this.h2,p=this.h3,l=this.h4,d=this.h5,y=this.h6,v=this.h7,b=this.blocks;for(t=16;t<64;++t)e=((o=b[t-15])>>>7|o<<25)^(o>>>18|o<<14)^o>>>3,r=((o=b[t-2])>>>17|o<<15)^(o>>>19|o<<13)^o>>>10,b[t]=b[t-16]+e+b[t-7]+r<<0;for(c=f&h,t=0;t<64;t+=4)this.first?(this.is224?(i=300032,v=(o=b[0]-1413257819)-150054599<<0,p=o+24177077<<0):(i=704751109,v=(o=b[0]-210244248)-1521486534<<0,p=o+143694565<<0),this.first=!1):(e=(u>>>2|u<<30)^(u>>>13|u<<19)^(u>>>22|u<<10),n=(i=u&f)^u&h^c,v=p+(o=v+(r=(l>>>6|l<<26)^(l>>>11|l<<21)^(l>>>25|l<<7))+(l&d^~l&y)+K[t]+b[t])<<0,p=o+(e+n)<<0),e=(p>>>2|p<<30)^(p>>>13|p<<19)^(p>>>22|p<<10),n=(s=p&u)^p&f^i,y=h+(o=y+(r=(v>>>6|v<<26)^(v>>>11|v<<21)^(v>>>25|v<<7))+(v&l^~v&d)+K[t+1]+b[t+1])<<0,e=((h=o+(e+n)<<0)>>>2|h<<30)^(h>>>13|h<<19)^(h>>>22|h<<10),n=(a=h&p)^h&u^s,d=f+(o=d+(r=(y>>>6|y<<26)^(y>>>11|y<<21)^(y>>>25|y<<7))+(y&v^~y&l)+K[t+2]+b[t+2])<<0,e=((f=o+(e+n)<<0)>>>2|f<<30)^(f>>>13|f<<19)^(f>>>22|f<<10),n=(c=f&h)^f&p^a,l=u+(o=l+(r=(d>>>6|d<<26)^(d>>>11|d<<21)^(d>>>25|d<<7))+(d&y^~d&v)+K[t+3]+b[t+3])<<0,u=o+(e+n)<<0;this.h0=this.h0+u<<0,this.h1=this.h1+f<<0,this.h2=this.h2+h<<0,this.h3=this.h3+p<<0,this.h4=this.h4+l<<0,this.h5=this.h5+d<<0,this.h6=this.h6+y<<0,this.h7=this.h7+v<<0},Sha256.prototype.hex=function(){this.finalize();var t=this.h0,e=this.h1,r=this.h2,n=this.h3,o=this.h4,i=this.h5,s=this.h6,a=this.h7,c=HEX_CHARS[t>>28&15]+HEX_CHARS[t>>24&15]+HEX_CHARS[t>>20&15]+HEX_CHARS[t>>16&15]+HEX_CHARS[t>>12&15]+HEX_CHARS[t>>8&15]+HEX_CHARS[t>>4&15]+HEX_CHARS[15&t]+HEX_CHARS[e>>28&15]+HEX_CHARS[e>>24&15]+HEX_CHARS[e>>20&15]+HEX_CHARS[e>>16&15]+HEX_CHARS[e>>12&15]+HEX_CHARS[e>>8&15]+HEX_CHARS[e>>4&15]+HEX_CHARS[15&e]+HEX_CHARS[r>>28&15]+HEX_CHARS[r>>24&15]+HEX_CHARS[r>>20&15]+HEX_CHARS[r>>16&15]+HEX_CHARS[r>>12&15]+HEX_CHARS[r>>8&15]+HEX_CHARS[r>>4&15]+HEX_CHARS[15&r]+HEX_CHARS[n>>28&15]+HEX_CHARS[n>>24&15]+HEX_CHARS[n>>20&15]+HEX_CHARS[n>>16&15]+HEX_CHARS[n>>12&15]+HEX_CHARS[n>>8&15]+HEX_CHARS[n>>4&15]+HEX_CHARS[15&n]+HEX_CHARS[o>>28&15]+HEX_CHARS[o>>24&15]+HEX_CHARS[o>>20&15]+HEX_CHARS[o>>16&15]+HEX_CHARS[o>>12&15]+HEX_CHARS[o>>8&15]+HEX_CHARS[o>>4&15]+HEX_CHARS[15&o]+HEX_CHARS[i>>28&15]+HEX_CHARS[i>>24&15]+HEX_CHARS[i>>20&15]+HEX_CHARS[i>>16&15]+HEX_CHARS[i>>12&15]+HEX_CHARS[i>>8&15]+HEX_CHARS[i>>4&15]+HEX_CHARS[15&i]+HEX_CHARS[s>>28&15]+HEX_CHARS[s>>24&15]+HEX_CHARS[s>>20&15]+HEX_CHARS[s>>16&15]+HEX_CHARS[s>>12&15]+HEX_CHARS[s>>8&15]+HEX_CHARS[s>>4&15]+HEX_CHARS[15&s];return this.is224||(c+=HEX_CHARS[a>>28&15]+HEX_CHARS[a>>24&15]+HEX_CHARS[a>>20&15]+HEX_CHARS[a>>16&15]+HEX_CHARS[a>>12&15]+HEX_CHARS[a>>8&15]+HEX_CHARS[a>>4&15]+HEX_CHARS[15&a]),c},Sha256.prototype.toString=Sha256.prototype.hex,Sha256.prototype.digest=function(){this.finalize();var t=this.h0,e=this.h1,r=this.h2,n=this.h3,o=this.h4,i=this.h5,s=this.h6,a=this.h7,c=[t>>24&255,t>>16&255,t>>8&255,255&t,e>>24&255,e>>16&255,e>>8&255,255&e,r>>24&255,r>>16&255,r>>8&255,255&r,n>>24&255,n>>16&255,n>>8&255,255&n,o>>24&255,o>>16&255,o>>8&255,255&o,i>>24&255,i>>16&255,i>>8&255,255&i,s>>24&255,s>>16&255,s>>8&255,255&s];return this.is224||c.push(a>>24&255,a>>16&255,a>>8&255,255&a),c},Sha256.prototype.array=Sha256.prototype.digest,Sha256.prototype.arrayBuffer=function(){this.finalize();var t=new ArrayBuffer(this.is224?28:32),e=new DataView(t);return e.setUint32(0,this.h0),e.setUint32(4,this.h1),e.setUint32(8,this.h2),e.setUint32(12,this.h3),e.setUint32(16,this.h4),e.setUint32(20,this.h5),e.setUint32(24,this.h6),this.is224||e.setUint32(28,this.h7),t},HmacSha256.prototype=new Sha256,HmacSha256.prototype.finalize=function(){if(Sha256.prototype.finalize.call(this),this.inner){this.inner=!1;var t=this.array();Sha256.call(this,this.is224,this.sharedMemory),this.update(this.oKeyPad),this.update(t),Sha256.prototype.finalize.call(this)}};var exports=createMethod();exports.sha256=exports,exports.sha224=createMethod(!0),exports.sha256.hmac=createHmacMethod(),exports.sha224.hmac=createHmacMethod(!0),COMMON_JS?module.exports=exports:(root.sha256=exports.sha256,root.sha224=exports.sha224,AMD&&(__WEBPACK_AMD_DEFINE_RESULT__=function(){return exports}.call(exports,__webpack_require__,exports,module),void 0===__WEBPACK_AMD_DEFINE_RESULT__||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)))}()}).call(this,__webpack_require__(120),__webpack_require__(30))},function(t,e,r){var n=r(49),o=r(79),i=r(32),s=r(81),a=r(88),c=r(91),u=r(92),f=r(93),h=r(95),p=r(96),l=r(97),d=r(13),y=r(102),v=r(103),b=r(109),m=r(11),_=r(19),g=r(111),w=r(2),x=r(113),j=r(18),A=r(24),S={};S["[object Arguments]"]=S["[object Array]"]=S["[object ArrayBuffer]"]=S["[object DataView]"]=S["[object Boolean]"]=S["[object Date]"]=S["[object Float32Array]"]=S["[object Float64Array]"]=S["[object Int8Array]"]=S["[object Int16Array]"]=S["[object Int32Array]"]=S["[object Map]"]=S["[object Number]"]=S["[object Object]"]=S["[object RegExp]"]=S["[object Set]"]=S["[object String]"]=S["[object Symbol]"]=S["[object Uint8Array]"]=S["[object Uint8ClampedArray]"]=S["[object Uint16Array]"]=S["[object Uint32Array]"]=!0,S["[object Error]"]=S["[object Function]"]=S["[object WeakMap]"]=!1,t.exports=function t(e,r,E,O,R,H){var T,C=1&r,k=2&r,P=4&r;if(E&&(T=R?E(e,O,R,H):E(e)),void 0!==T)return T;if(!w(e))return e;var I=m(e);if(I){if(T=y(e),!C)return u(e,T)}else{var $=d(e),U="[object Function]"==$||"[object GeneratorFunction]"==$;if(_(e))return c(e,C);if("[object Object]"==$||"[object Arguments]"==$||U&&!R){if(T=k||U?{}:b(e),!C)return k?h(e,a(T,e)):f(e,s(T,e))}else{if(!S[$])return R?e:{};T=v(e,$,C)}}H||(H=new n);var B=H.get(e);if(B)return B;H.set(e,T),x(e)?e.forEach((function(n){T.add(t(n,r,E,n,e,H))})):g(e)&&e.forEach((function(n,o){T.set(o,t(n,r,E,o,e,H))}));var F=I?void 0:(P?k?l:p:k?A:j)(e);return o(F||e,(function(n,o){F&&(n=e[o=n]),i(T,o,t(n,r,E,o,e,H))})),T}},function(t,e,r){var n=r(5),o=r(55),i=r(56),s=r(57),a=r(58),c=r(59);function u(t){var e=this.__data__=new n(t);this.size=e.size}u.prototype.clear=o,u.prototype.delete=i,u.prototype.get=s,u.prototype.has=a,u.prototype.set=c,t.exports=u},function(t,e){t.exports=function(){this.__data__=[],this.size=0}},function(t,e,r){var n=r(6),o=Array.prototype.splice;t.exports=function(t){var e=this.__data__,r=n(e,t);return!(r<0)&&(r==e.length-1?e.pop():o.call(e,r,1),--this.size,!0)}},function(t,e,r){var n=r(6);t.exports=function(t){var e=this.__data__,r=n(e,t);return r<0?void 0:e[r][1]}},function(t,e,r){var n=r(6);t.exports=function(t){return n(this.__data__,t)>-1}},function(t,e,r){var n=r(6);t.exports=function(t,e){var r=this.__data__,o=n(r,t);return o<0?(++this.size,r.push([t,e])):r[o][1]=e,this}},function(t,e,r){var n=r(5);t.exports=function(){this.__data__=new n,this.size=0}},function(t,e){t.exports=function(t){var e=this.__data__,r=e.delete(t);return this.size=e.size,r}},function(t,e){t.exports=function(t){return this.__data__.get(t)}},function(t,e){t.exports=function(t){return this.__data__.has(t)}},function(t,e,r){var n=r(5),o=r(16),i=r(66);t.exports=function(t,e){var r=this.__data__;if(r instanceof n){var s=r.__data__;if(!o||s.length<199)return s.push([t,e]),this.size=++r.size,this;r=this.__data__=new i(s)}return r.set(t,e),this.size=r.size,this}},function(t,e,r){var n=r(28),o=r(63),i=r(2),s=r(31),a=/^\[object .+?Constructor\]$/,c=Function.prototype,u=Object.prototype,f=c.toString,h=u.hasOwnProperty,p=RegExp("^"+f.call(h).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");t.exports=function(t){return!(!i(t)||o(t))&&(n(t)?p:a).test(s(t))}},function(t,e,r){var n=r(17),o=Object.prototype,i=o.hasOwnProperty,s=o.toString,a=n?n.toStringTag:void 0;t.exports=function(t){var e=i.call(t,a),r=t[a];try{t[a]=void 0;var n=!0}catch(t){}var o=s.call(t);return n&&(e?t[a]=r:delete t[a]),o}},function(t,e){var r=Object.prototype.toString;t.exports=function(t){return r.call(t)}},function(t,e,r){var n,o=r(64),i=(n=/[^.]+$/.exec(o&&o.keys&&o.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"";t.exports=function(t){return!!i&&i in t}},function(t,e,r){var n=r(0)["__core-js_shared__"];t.exports=n},function(t,e){t.exports=function(t,e){return null==t?void 0:t[e]}},function(t,e,r){var n=r(67),o=r(74),i=r(76),s=r(77),a=r(78);function c(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}c.prototype.clear=n,c.prototype.delete=o,c.prototype.get=i,c.prototype.has=s,c.prototype.set=a,t.exports=c},function(t,e,r){var n=r(68),o=r(5),i=r(16);t.exports=function(){this.size=0,this.__data__={hash:new n,map:new(i||o),string:new n}}},function(t,e,r){var n=r(69),o=r(70),i=r(71),s=r(72),a=r(73);function c(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}c.prototype.clear=n,c.prototype.delete=o,c.prototype.get=i,c.prototype.has=s,c.prototype.set=a,t.exports=c},function(t,e,r){var n=r(8);t.exports=function(){this.__data__=n?n(null):{},this.size=0}},function(t,e){t.exports=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e}},function(t,e,r){var n=r(8),o=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;if(n){var r=e[t];return"__lodash_hash_undefined__"===r?void 0:r}return o.call(e,t)?e[t]:void 0}},function(t,e,r){var n=r(8),o=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;return n?void 0!==e[t]:o.call(e,t)}},function(t,e,r){var n=r(8);t.exports=function(t,e){var r=this.__data__;return this.size+=this.has(t)?0:1,r[t]=n&&void 0===e?"__lodash_hash_undefined__":e,this}},function(t,e,r){var n=r(9);t.exports=function(t){var e=n(this,t).delete(t);return this.size-=e?1:0,e}},function(t,e){t.exports=function(t){var e=typeof t;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t}},function(t,e,r){var n=r(9);t.exports=function(t){return n(this,t).get(t)}},function(t,e,r){var n=r(9);t.exports=function(t){return n(this,t).has(t)}},function(t,e,r){var n=r(9);t.exports=function(t,e){var r=n(this,t),o=r.size;return r.set(t,e),this.size+=r.size==o?0:1,this}},function(t,e){t.exports=function(t,e){for(var r=-1,n=null==t?0:t.length;++r<n&&!1!==e(t[r],r,t););return t}},function(t,e,r){var n=r(1),o=function(){try{var t=n(Object,"defineProperty");return t({},"",{}),t}catch(t){}}();t.exports=o},function(t,e,r){var n=r(10),o=r(18);t.exports=function(t,e){return t&&n(e,o(e),t)}},function(t,e){t.exports=function(t,e){for(var r=-1,n=Array(t);++r<t;)n[r]=e(r);return n}},function(t,e,r){var n=r(7),o=r(3);t.exports=function(t){return o(t)&&"[object Arguments]"==n(t)}},function(t,e){t.exports=function(){return!1}},function(t,e){var r=/^(?:0|[1-9]\d*)$/;t.exports=function(t,e){var n=typeof t;return!!(e=null==e?9007199254740991:e)&&("number"==n||"symbol"!=n&&r.test(t))&&t>-1&&t%1==0&&t<e}},function(t,e,r){var n=r(7),o=r(37),i=r(3),s={};s["[object Float32Array]"]=s["[object Float64Array]"]=s["[object Int8Array]"]=s["[object Int16Array]"]=s["[object Int32Array]"]=s["[object Uint8Array]"]=s["[object Uint8ClampedArray]"]=s["[object Uint16Array]"]=s["[object Uint32Array]"]=!0,s["[object Arguments]"]=s["[object Array]"]=s["[object ArrayBuffer]"]=s["[object Boolean]"]=s["[object DataView]"]=s["[object Date]"]=s["[object Error]"]=s["[object Function]"]=s["[object Map]"]=s["[object Number]"]=s["[object Object]"]=s["[object RegExp]"]=s["[object Set]"]=s["[object String]"]=s["[object WeakMap]"]=!1,t.exports=function(t){return i(t)&&o(t.length)&&!!s[n(t)]}},function(t,e,r){var n=r(39)(Object.keys,Object);t.exports=n},function(t,e,r){var n=r(10),o=r(24);t.exports=function(t,e){return t&&n(e,o(e),t)}},function(t,e,r){var n=r(2),o=r(12),i=r(90),s=Object.prototype.hasOwnProperty;t.exports=function(t){if(!n(t))return i(t);var e=o(t),r=[];for(var a in t)("constructor"!=a||!e&&s.call(t,a))&&r.push(a);return r}},function(t,e){t.exports=function(t){var e=[];if(null!=t)for(var r in Object(t))e.push(r);return e}},function(t,e,r){(function(t){var n=r(0),o=e&&!e.nodeType&&e,i=o&&"object"==typeof t&&t&&!t.nodeType&&t,s=i&&i.exports===o?n.Buffer:void 0,a=s?s.allocUnsafe:void 0;t.exports=function(t,e){if(e)return t.slice();var r=t.length,n=a?a(r):new t.constructor(r);return t.copy(n),n}}).call(this,r(20)(t))},function(t,e){t.exports=function(t,e){var r=-1,n=t.length;for(e||(e=Array(n));++r<n;)e[r]=t[r];return e}},function(t,e,r){var n=r(10),o=r(25);t.exports=function(t,e){return n(t,o(t),e)}},function(t,e){t.exports=function(t,e){for(var r=-1,n=null==t?0:t.length,o=0,i=[];++r<n;){var s=t[r];e(s,r,t)&&(i[o++]=s)}return i}},function(t,e,r){var n=r(10),o=r(41);t.exports=function(t,e){return n(t,o(t),e)}},function(t,e,r){var n=r(44),o=r(25),i=r(18);t.exports=function(t){return n(t,i,o)}},function(t,e,r){var n=r(44),o=r(41),i=r(24);t.exports=function(t){return n(t,i,o)}},function(t,e,r){var n=r(1)(r(0),"DataView");t.exports=n},function(t,e,r){var n=r(1)(r(0),"Promise");t.exports=n},function(t,e,r){var n=r(1)(r(0),"Set");t.exports=n},function(t,e,r){var n=r(1)(r(0),"WeakMap");t.exports=n},function(t,e){var r=Object.prototype.hasOwnProperty;t.exports=function(t){var e=t.length,n=new t.constructor(e);return e&&"string"==typeof t[0]&&r.call(t,"index")&&(n.index=t.index,n.input=t.input),n}},function(t,e,r){var n=r(26),o=r(105),i=r(106),s=r(107),a=r(108);t.exports=function(t,e,r){var c=t.constructor;switch(e){case"[object ArrayBuffer]":return n(t);case"[object Boolean]":case"[object Date]":return new c(+t);case"[object DataView]":return o(t,r);case"[object Float32Array]":case"[object Float64Array]":case"[object Int8Array]":case"[object Int16Array]":case"[object Int32Array]":case"[object Uint8Array]":case"[object Uint8ClampedArray]":case"[object Uint16Array]":case"[object Uint32Array]":return a(t,r);case"[object Map]":return new c;case"[object Number]":case"[object String]":return new c(t);case"[object RegExp]":return i(t);case"[object Set]":return new c;case"[object Symbol]":return s(t)}}},function(t,e,r){var n=r(0).Uint8Array;t.exports=n},function(t,e,r){var n=r(26);t.exports=function(t,e){var r=e?n(t.buffer):t.buffer;return new t.constructor(r,t.byteOffset,t.byteLength)}},function(t,e){var r=/\w*$/;t.exports=function(t){var e=new t.constructor(t.source,r.exec(t));return e.lastIndex=t.lastIndex,e}},function(t,e,r){var n=r(17),o=n?n.prototype:void 0,i=o?o.valueOf:void 0;t.exports=function(t){return i?Object(i.call(t)):{}}},function(t,e,r){var n=r(26);t.exports=function(t,e){var r=e?n(t.buffer):t.buffer;return new t.constructor(r,t.byteOffset,t.length)}},function(t,e,r){var n=r(110),o=r(43),i=r(12);t.exports=function(t){return"function"!=typeof t.constructor||i(t)?{}:n(o(t))}},function(t,e,r){var n=r(2),o=Object.create,i=function(){function t(){}return function(e){if(!n(e))return{};if(o)return o(e);t.prototype=e;var r=new t;return t.prototype=void 0,r}}();t.exports=i},function(t,e,r){var n=r(112),o=r(21),i=r(22),s=i&&i.isMap,a=s?o(s):n;t.exports=a},function(t,e,r){var n=r(13),o=r(3);t.exports=function(t){return o(t)&&"[object Map]"==n(t)}},function(t,e,r){var n=r(114),o=r(21),i=r(22),s=i&&i.isSet,a=s?o(s):n;t.exports=a},function(t,e,r){var n=r(13),o=r(3);t.exports=function(t){return o(t)&&"[object Set]"==n(t)}},function(t,e,r){"use strict";t.exports=t=>encodeURIComponent(t).replace(/[!'()*]/g,t=>"%"+t.charCodeAt(0).toString(16).toUpperCase())},function(t,e,r){"use strict";var n=new RegExp("%[a-f0-9]{2}","gi"),o=new RegExp("(%[a-f0-9]{2})+","gi");function i(t,e){try{return decodeURIComponent(t.join(""))}catch(t){}if(1===t.length)return t;e=e||1;var r=t.slice(0,e),n=t.slice(e);return Array.prototype.concat.call([],i(r),i(n))}function s(t){try{return decodeURIComponent(t)}catch(o){for(var e=t.match(n),r=1;r<e.length;r++)e=(t=i(e,r).join("")).match(n);return t}}t.exports=function(t){if("string"!=typeof t)throw new TypeError("Expected `encodedURI` to be of type `string`, got `"+typeof t+"`");try{return t=t.replace(/\+/g," "),decodeURIComponent(t)}catch(e){return function(t){for(var e={"%FE%FF":"��","%FF%FE":"��"},r=o.exec(t);r;){try{e[r[0]]=decodeURIComponent(r[0])}catch(t){var n=s(r[0]);n!==r[0]&&(e[r[0]]=n)}r=o.exec(t)}e["%C2"]="�";for(var i=Object.keys(e),a=0;a<i.length;a++){var c=i[a];t=t.replace(new RegExp(c,"g"),e[c])}return t}(t)}}},function(t,e,r){"use strict";t.exports=(t,e)=>{if("string"!=typeof t||"string"!=typeof e)throw new TypeError("Expected the arguments to be of type `string`");if(""===e)return[t];const r=t.indexOf(e);return-1===r?[t]:[t.slice(0,r),t.slice(r+e.length)]}},function(t,e,r){r(119),t.exports=self.fetch.bind(self)},function(t,e,r){"use strict";r.r(e),r.d(e,"Headers",(function(){return d})),r.d(e,"Request",(function(){return w})),r.d(e,"Response",(function(){return j})),r.d(e,"DOMException",(function(){return S})),r.d(e,"fetch",(function(){return E}));var n="undefined"!=typeof globalThis&&globalThis||"undefined"!=typeof self&&self||void 0!==n&&n,o="URLSearchParams"in n,i="Symbol"in n&&"iterator"in Symbol,s="FileReader"in n&&"Blob"in n&&function(){try{return new Blob,!0}catch(t){return!1}}(),a="FormData"in n,c="ArrayBuffer"in n;if(c)var u=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],f=ArrayBuffer.isView||function(t){return t&&u.indexOf(Object.prototype.toString.call(t))>-1};function h(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(t)||""===t)throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function p(t){return"string"!=typeof t&&(t=String(t)),t}function l(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return i&&(e[Symbol.iterator]=function(){return e}),e}function d(t){this.map={},t instanceof d?t.forEach((function(t,e){this.append(e,t)}),this):Array.isArray(t)?t.forEach((function(t){this.append(t[0],t[1])}),this):t&&Object.getOwnPropertyNames(t).forEach((function(e){this.append(e,t[e])}),this)}function y(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function v(t){return new Promise((function(e,r){t.onload=function(){e(t.result)},t.onerror=function(){r(t.error)}}))}function b(t){var e=new FileReader,r=v(e);return e.readAsArrayBuffer(t),r}function m(t){if(t.slice)return t.slice(0);var e=new Uint8Array(t.byteLength);return e.set(new Uint8Array(t)),e.buffer}function _(){return this.bodyUsed=!1,this._initBody=function(t){var e;this.bodyUsed=this.bodyUsed,this._bodyInit=t,t?"string"==typeof t?this._bodyText=t:s&&Blob.prototype.isPrototypeOf(t)?this._bodyBlob=t:a&&FormData.prototype.isPrototypeOf(t)?this._bodyFormData=t:o&&URLSearchParams.prototype.isPrototypeOf(t)?this._bodyText=t.toString():c&&s&&((e=t)&&DataView.prototype.isPrototypeOf(e))?(this._bodyArrayBuffer=m(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):c&&(ArrayBuffer.prototype.isPrototypeOf(t)||f(t))?this._bodyArrayBuffer=m(t):this._bodyText=t=Object.prototype.toString.call(t):this._bodyText="",this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):o&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},s&&(this.blob=function(){var t=y(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){if(this._bodyArrayBuffer){var t=y(this);return t||(ArrayBuffer.isView(this._bodyArrayBuffer)?Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset,this._bodyArrayBuffer.byteOffset+this._bodyArrayBuffer.byteLength)):Promise.resolve(this._bodyArrayBuffer))}return this.blob().then(b)}),this.text=function(){var t,e,r,n=y(this);if(n)return n;if(this._bodyBlob)return t=this._bodyBlob,e=new FileReader,r=v(e),e.readAsText(t),r;if(this._bodyArrayBuffer)return Promise.resolve(function(t){for(var e=new Uint8Array(t),r=new Array(e.length),n=0;n<e.length;n++)r[n]=String.fromCharCode(e[n]);return r.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},a&&(this.formData=function(){return this.text().then(x)}),this.json=function(){return this.text().then(JSON.parse)},this}d.prototype.append=function(t,e){t=h(t),e=p(e);var r=this.map[t];this.map[t]=r?r+", "+e:e},d.prototype.delete=function(t){delete this.map[h(t)]},d.prototype.get=function(t){return t=h(t),this.has(t)?this.map[t]:null},d.prototype.has=function(t){return this.map.hasOwnProperty(h(t))},d.prototype.set=function(t,e){this.map[h(t)]=p(e)},d.prototype.forEach=function(t,e){for(var r in this.map)this.map.hasOwnProperty(r)&&t.call(e,this.map[r],r,this)},d.prototype.keys=function(){var t=[];return this.forEach((function(e,r){t.push(r)})),l(t)},d.prototype.values=function(){var t=[];return this.forEach((function(e){t.push(e)})),l(t)},d.prototype.entries=function(){var t=[];return this.forEach((function(e,r){t.push([r,e])})),l(t)},i&&(d.prototype[Symbol.iterator]=d.prototype.entries);var g=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function w(t,e){if(!(this instanceof w))throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');var r,n,o=(e=e||{}).body;if(t instanceof w){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new d(t.headers)),this.method=t.method,this.mode=t.mode,this.signal=t.signal,o||null==t._bodyInit||(o=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=e.credentials||this.credentials||"same-origin",!e.headers&&this.headers||(this.headers=new d(e.headers)),this.method=(r=e.method||this.method||"GET",n=r.toUpperCase(),g.indexOf(n)>-1?n:r),this.mode=e.mode||this.mode||null,this.signal=e.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&o)throw new TypeError("Body not allowed for GET or HEAD requests");if(this._initBody(o),!("GET"!==this.method&&"HEAD"!==this.method||"no-store"!==e.cache&&"no-cache"!==e.cache)){var i=/([?&])_=[^&]*/;if(i.test(this.url))this.url=this.url.replace(i,"$1_="+(new Date).getTime());else{this.url+=(/\?/.test(this.url)?"&":"?")+"_="+(new Date).getTime()}}}function x(t){var e=new FormData;return t.trim().split("&").forEach((function(t){if(t){var r=t.split("="),n=r.shift().replace(/\+/g," "),o=r.join("=").replace(/\+/g," ");e.append(decodeURIComponent(n),decodeURIComponent(o))}})),e}function j(t,e){if(!(this instanceof j))throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');e||(e={}),this.type="default",this.status=void 0===e.status?200:e.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in e?e.statusText:"",this.headers=new d(e.headers),this.url=e.url||"",this._initBody(t)}w.prototype.clone=function(){return new w(this,{body:this._bodyInit})},_.call(w.prototype),_.call(j.prototype),j.prototype.clone=function(){return new j(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new d(this.headers),url:this.url})},j.error=function(){var t=new j(null,{status:0,statusText:""});return t.type="error",t};var A=[301,302,303,307,308];j.redirect=function(t,e){if(-1===A.indexOf(e))throw new RangeError("Invalid status code");return new j(null,{status:e,headers:{location:t}})};var S=n.DOMException;try{new S}catch(t){(S=function(t,e){this.message=t,this.name=e;var r=Error(t);this.stack=r.stack}).prototype=Object.create(Error.prototype),S.prototype.constructor=S}function E(t,e){return new Promise((function(r,o){var i=new w(t,e);if(i.signal&&i.signal.aborted)return o(new S("Aborted","AbortError"));var a=new XMLHttpRequest;function u(){a.abort()}a.onload=function(){var t,e,n={status:a.status,statusText:a.statusText,headers:(t=a.getAllResponseHeaders()||"",e=new d,t.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach((function(t){var r=t.split(":"),n=r.shift().trim();if(n){var o=r.join(":").trim();e.append(n,o)}})),e)};n.url="responseURL"in a?a.responseURL:n.headers.get("X-Request-URL");var o="response"in a?a.response:a.responseText;setTimeout((function(){r(new j(o,n))}),0)},a.onerror=function(){setTimeout((function(){o(new TypeError("Network request failed"))}),0)},a.ontimeout=function(){setTimeout((function(){o(new TypeError("Network request failed"))}),0)},a.onabort=function(){setTimeout((function(){o(new S("Aborted","AbortError"))}),0)},a.open(i.method,function(t){try{return""===t&&n.location.href?n.location.href:t}catch(e){return t}}(i.url),!0),"include"===i.credentials?a.withCredentials=!0:"omit"===i.credentials&&(a.withCredentials=!1),"responseType"in a&&(s?a.responseType="blob":c&&i.headers.get("Content-Type")&&-1!==i.headers.get("Content-Type").indexOf("application/octet-stream")&&(a.responseType="arraybuffer")),!e||"object"!=typeof e.headers||e.headers instanceof d?i.headers.forEach((function(t,e){a.setRequestHeader(e,t)})):Object.getOwnPropertyNames(e.headers).forEach((function(t){a.setRequestHeader(t,p(e.headers[t]))})),i.signal&&(i.signal.addEventListener("abort",u),a.onreadystatechange=function(){4===a.readyState&&i.signal.removeEventListener("abort",u)}),a.send(void 0===i._bodyInit?null:i._bodyInit)}))}E.polyfill=!0,n.fetch||(n.fetch=E,n.Headers=d,n.Request=w,n.Response=j)},function(t,e){var r,n,o=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(t){if(r===setTimeout)return setTimeout(t,0);if((r===i||!r)&&setTimeout)return r=setTimeout,setTimeout(t,0);try{return r(t,0)}catch(e){try{return r.call(null,t,0)}catch(e){return r.call(this,t,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:i}catch(t){r=i}try{n="function"==typeof clearTimeout?clearTimeout:s}catch(t){n=s}}();var c,u=[],f=!1,h=-1;function p(){f&&c&&(f=!1,c.length?u=c.concat(u):h=-1,u.length&&l())}function l(){if(!f){var t=a(p);f=!0;for(var e=u.length;e;){for(c=u,u=[];++h<e;)c&&c[h].run();h=-1,e=u.length}c=null,f=!1,function(t){if(n===clearTimeout)return clearTimeout(t);if((n===s||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(t);try{n(t)}catch(e){try{return n.call(null,t)}catch(e){return n.call(this,t)}}}(t)}}function d(t,e){this.fun=t,this.array=e}function y(){}o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];u.push(new d(t,e)),1!==u.length||f||a(l)},d.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=y,o.addListener=y,o.once=y,o.off=y,o.removeListener=y,o.removeAllListeners=y,o.emit=y,o.prependListener=y,o.prependOnceListener=y,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(t,e){(function(e){t.exports=e}).call(this,{})},function(t,e,r){"use strict";const n=r(123),o={exact:!1},i=n.v4().source+"\\/(3[0-2]|[12]?[0-9])",s=n.v6().source+"\\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])",a=new RegExp(`^${i}$`),c=new RegExp(`^${s}$`),u=new RegExp(`(?:^${i}$)|(?:^${s}$)`);t.exports=({exact:t}=o)=>t?u:new RegExp(`(?:${i})|(?:${s})`,"g"),t.exports.v4=({exact:t}=o)=>t?a:new RegExp(i,"g"),t.exports.v6=({exact:t}=o)=>t?c:new RegExp(s,"g")},function(t,e,r){"use strict";const n=t=>t&&t.includeBoundaries?"(?:(?<=\\s|^)(?=[a-fA-F\\d:])|(?<=[a-fA-F\\d:])(?=\\s|$))":"",o="(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}",i="[a-fA-F\\d]{1,4}",s=`\n(\n(?:${i}:){7}(?:${i}|:)|                                // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8\n(?:${i}:){6}(?:${o}|:${i}|:)|                         // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4\n(?:${i}:){5}(?::${o}|(:${i}){1,2}|:)|                 // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4\n(?:${i}:){4}(?:(:${i}){0,1}:${o}|(:${i}){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4\n(?:${i}:){3}(?:(:${i}){0,2}:${o}|(:${i}){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4\n(?:${i}:){2}(?:(:${i}){0,3}:${o}|(:${i}){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4\n(?:${i}:){1}(?:(:${i}){0,4}:${o}|(:${i}){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4\n(?::((?::${i}){0,5}:${o}|(?::${i}){1,7}|:))           // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4\n)(%[0-9a-zA-Z]{1,})?                                           // %eth0            %1\n`.replace(/\s*\/\/.*$/gm,"").replace(/\n/g,"").trim(),a=new RegExp(`(?:^${o}$)|(?:^${s}$)`),c=new RegExp(`^${o}$`),u=new RegExp(`^${s}$`),f=t=>t&&t.exact?a:new RegExp(`(?:${n(t)}${o}${n(t)})|(?:${n(t)}${s}${n(t)})`,"g");f.v4=t=>t&&t.exact?c:new RegExp(`${n(t)}${o}${n(t)}`,"g"),f.v6=t=>t&&t.exact?u:new RegExp(`${n(t)}${s}${n(t)}`,"g"),t.exports=f},function(t,e,r){"use strict";r.r(e),r.d(e,"AuthOptions",(function(){return n})),r.d(e,"CloudConfig",(function(){return o})),r.d(e,"CloudConfigHelper",(function(){return i})),r.d(e,"cloudConfig",(function(){return s})),r.d(e,"normalizeDateTime",(function(){return c})),r.d(e,"HttpError",(function(){return b})),r.d(e,"RequestError",(function(){return m})),r.d(e,"mergeHeaders",(function(){return g})),r.d(e,"RequestOpts",(function(){return w})),r.d(e,"joinURL",(function(){return S})),r.d(e,"signRequest",(function(){return O})),r.d(e,"ComputeV2",(function(){return Y})),r.d(e,"ComputeV1",(function(){return tt})),r.d(e,"createToken",(function(){return B})),r.d(e,"verifyToken",(function(){return F})),r.d(e,"listEndpoints",(function(){return L})),r.d(e,"createCredential",(function(){return X})),r.d(e,"listServices",(function(){return z})),r.d(e,"IdentityV3",(function(){return W})),r.d(e,"ImageV2",(function(){return nt})),r.d(e,"VpcV1",(function(){return ht})),r.d(e,"Client",(function(){return lt}));class n{}class o{constructor(){this.auth=new n}}class i{constructor(t){this.authUrl=t}baseCfg(){const t=new o;return t.auth.auth_url=this.authUrl,t}withPassword(t,e,r,n){const o=this.baseCfg();return o.auth.domain_name=t,o.auth.username=e,o.auth.password=r,o.auth.project_name=n,o}withToken(t){const e=this.baseCfg();return e.auth.token=t,e}withAKSK(t,e){const r=this.baseCfg();return r.auth.ak=t,r.auth.sk=e,r}}function s(t){return new i(t)}const a=/(?<=\d{2})\.\d{3}(?=Z)/;function c(t){if(t)return new Date(t).toISOString().replace(a,"")}var u=r(4),f=r.n(u),h=r(14),p=r.n(h),l=r(45),d=r(46),y=function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function s(t){try{c(n.next(t))}catch(t){i(t)}}function a(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}c((n=n.apply(t,e||[])).next())}))};r(118);const v=/^https?:\/\/.+/;class b extends Error{constructor(t,e){super(e),this.name="HTTPError",this.statusCode=t}}class m extends Error{}function _(t){const e=new Headers;return t?t instanceof Headers?new Headers(t):(Object.entries(t).forEach(t=>{null!=t[1]&&e.append(t[0],String(t[1]))}),e):e}function g(t,e){if(!t&&!e)return new Headers;const r=_(t);if(e)for(const[t,n]of _(e))r.append(t,n);return r}class w{constructor(t){if(!t.method)throw new m("Request without Method: "+JSON.stringify(t));if(this.method=t.method,!t.url)throw new m("Request without URL: "+JSON.stringify(t));this.url=t.url,this.headers=g(t.headers);const e={},r=t.params;r&&Object.keys(r).forEach(t=>{null!=r[t]&&(e[t]=String(r[t]))}),this.params=e,t.json&&(this.body=JSON.stringify(t.json)),t.handler&&(this.handler=t.handler),this.schema=t.schema?t.schema:{}}}function x(t){const e=t&&!p()(t)?f()(t):{};return e.headers=g(e.headers),e.headers.set("User-Agent","OpenTelekomCloud JS/v1.0"),e}class j{constructor(t){this.beforeRequest=[],this.baseConfig=x(t)}injectPreProcessor(t){this.beforeRequest.push(t)}child(t){const e=f()(this);return e.baseConfig=t?x(t):x(),e}request(t){return y(this,void 0,void 0,(function*(){let e=new w(t);e.baseURL||(e.baseURL=this.baseConfig.baseURL),e.headers=g(this.baseConfig.headers,e.headers),e.handler&&(e=e.handler(e));for(const t of this.beforeRequest.reverse())e=t(e);let{baseURL:r,url:n}=e;r=r||this.baseConfig.baseURL,!n.match(v)&&r&&(n=S(r,n)),e.params&&(n=Object(l.stringifyUrl)({url:n,query:e.params},{encode:!0,skipNull:!0}));const o=yield fetch(n,e);if(!o.ok)throw new b(o.status,`HTTP error received. ${o.status} ${o.statusText}: ${yield o.text()}Request Opts:\n`+JSON.stringify(t));const i=yield o.text();o.data=i?JSON.parse(i):{};const s=Object(d.validate)(o.data,e.schema);if(!s.valid)throw Error("Failed JSON Schema validation: "+s.errors);return o}))}get(t){return y(this,void 0,void 0,(function*(){return t.method="GET",yield this.request(t)}))}post(t){return y(this,void 0,void 0,(function*(){return t.method="POST",yield this.request(t)}))}put(t){return y(this,void 0,void 0,(function*(){return t.method="PUT",yield this.request(t)}))}delete(t){return y(this,void 0,void 0,(function*(){return t.method="DELETE",yield this.request(t)}))}}const A=/^\/*(.+?)\/*$/;function S(...t){const e=[];for(const r of t){const t=r.match(A);t&&2===t.length&&e.push(t[1])}return e.join("/")}var E=r(47);function O(t,e){return function(t){return t.headers.set("X-Amz-Date",(new Date).toISOString().replace(/[:\-]|\.\d{3}/,"")),t.headers.set("Authorization",function(t){const e=new URL(t.url,t.baseURL),r=e.search.substring(1),n=Object.entries(t.headers).map(t=>`${t[0].toLowerCase()}:${t[1].trim()}\n`).sort().join(""),o=Object.keys(t.headers).sort((t,e)=>t[0].toLowerCase()<e[0].toLowerCase()?-1:1).join(";"),i=function(t){let e,r,n="";for(r=0;r<t.length;r++)e=t.charCodeAt(r).toString(16),n+=("000"+e).slice(-4);return n}(Object(E.sha256)(t.body));return`${t.method}\n${e.pathname}\n${r}\n${n}\n${o}\n${i}`}(t)),t}}var R=function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function s(t){try{c(n.next(t))}catch(t){i(t)}}function a(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}c((n=n.apply(t,e||[])).next())}))},H=function(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,r=t[Symbol.asyncIterator];return r?r.call(t):(t="function"==typeof __values?__values(t):t[Symbol.iterator](),e={},n("next"),n("throw"),n("return"),e[Symbol.asyncIterator]=function(){return this},e);function n(r){e[r]=t[r]&&function(e){return new Promise((function(n,o){(function(t,e,r,n){Promise.resolve(n).then((function(e){t({value:e,done:r})}),e)})(n,o,(e=t[r](e)).done,e.value)}))}}};class T{constructor(t,e){this.projectID="",this.client=e.child({baseURL:t})}}function C(t){const e=new URL(t);return`${e.protocol}//${e.host}`}T.type="";class k{constructor(t,e){this.pageOpts=t,this.client=e,this.firstIteration=!0}[Symbol.asyncIterator](){return this}next(){return R(this,void 0,void 0,(function*(){if(!this.pageOpts.url)return{value:void 0,done:!0};const t=yield this.client.get(this.pageOpts);return this.pageOpts.url=t.data.next,this.firstIteration&&(this.pageOpts.params=void 0,this.firstIteration=!1),{value:t.data}}))}all(){var t,e;return R(this,void 0,void 0,(function*(){let r=void 0,n=0;try{for(var o,i=H(this);!(o=yield i.next()).done;){const t=o.value;n++,r=this.mergeTwoPages(r,t)}}catch(e){t={error:e}}finally{try{o&&!o.done&&(e=i.return)&&(yield e.call(i))}finally{if(t)throw t.error}}if(!r)throw Error("Failed to get merged pages");return console.log(`Loaded ${n} pages`),r}))}mergeTwoPages(t,e){if(!e){if(!t)throw Error("No pages to merge");return t}if(!t)return f()(e);for(const r in t){if(!t.hasOwnProperty(r)||!e.hasOwnProperty(r))continue;const n=t[r],o=e[r];n instanceof Array&&o instanceof Array&&(t[r]=n.concat(...o))}return t}}function P(t){return new Promise(e=>setTimeout(e,t))}function I(t,e){return R(this,void 0,void 0,(function*(){const r=Date.now()+1e3*e;let n=1e3;for(;r>Date.now();){if(yield t())return;yield P(n),n<4e4&&(n+=n)}throw Error(`Timeout (${e}s) reached waiting for condition ${t}`)}))}function $(t,e){return R(this,void 0,void 0,(function*(){const r=Date.now()+1e3*e;let n=0;for(;r>Date.now();){yield P(n);try{yield t()}catch(t){if(t instanceof b&&404===t.statusCode)return;throw t}n+=1e3}throw Error(`Timeout (${e}s) reached waiting for resource to be unavailable`)}))}var U=function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function s(t){try{c(n.next(t))}catch(t){i(t)}}function a(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}c((n=n.apply(t,e||[])).next())}))};function B(t,e,r){return U(this,void 0,void 0,(function*(){const n=r?{nocatalog:"nocatalog"}:void 0,o=function(t){if(!t.password)throw"Password has to be provided";const e={identity:{methods:["password"],password:{user:{name:t.username,password:t.password,domain:{name:t.domain_name,id:t.domain_id}}}},scope:{}};return t.project_name||t.project_id?e.scope={project:{id:t.project_id,name:t.project_name}}:e.scope={domain:{id:t.domain_id,name:t.domain_name}},{auth:e}}(e),i=yield t.post({url:"/v3/auth/tokens",json:o,params:n}).catch(t=>{throw console.log(JSON.stringify(t)),t}),s=i.data.token,a=i.headers.get("X-Subject-Token");if(!a)throw"No tokenID provided as X-Subject-Token";return Object.assign({id:a},s)}))}function F(t,e,r){return U(this,void 0,void 0,(function*(){const n=r?{nocatalog:"nocatalog"}:void 0,o=yield t.get({url:"/v3/auth/tokens",headers:{"X-Subject-Token":e},params:n});return Object.assign({id:e},o.data.token)}))}var D=function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function s(t){try{c(n.next(t))}catch(t){i(t)}}function a(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}c((n=n.apply(t,e||[])).next())}))};function X(t,e,r){return D(this,void 0,void 0,(function*(){const n={user_id:e,description:r},o=yield t.post({url:"/v3.0/OS-CREDENTIAL/credentials",json:n});if(!o.ok)throw"Failed to create AK/SK";return o.data}))}var N=function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function s(t){try{c(n.next(t))}catch(t){i(t)}}function a(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}c((n=n.apply(t,e||[])).next())}))};var M=function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function s(t){try{c(n.next(t))}catch(t){i(t)}}function a(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}c((n=n.apply(t,e||[])).next())}))};function L(t){return M(this,void 0,void 0,(function*(){return(yield t.get({url:"/v3/endpoints"})).data.endpoints}))}var q=function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function s(t){try{c(n.next(t))}catch(t){i(t)}}function a(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}c((n=n.apply(t,e||[])).next())}))};function z(t){return q(this,void 0,void 0,(function*(){return(yield t.get({url:"/v3/services"})).data.services}))}var V=function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function s(t){try{c(n.next(t))}catch(t){i(t)}}function a(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}c((n=n.apply(t,e||[])).next())}))};class W extends T{constructor(t,e){super(C(t),e)}issueToken(t,e){return V(this,void 0,void 0,(function*(){return yield B(this.client,t,e)}))}verifyToken(t,e){return V(this,void 0,void 0,(function*(){return yield F(this.client,t,e)}))}getAKSK(t,e){return V(this,void 0,void 0,(function*(){return yield X(this.client,t,e)}))}listProjects(){return V(this,void 0,void 0,(function*(){return yield function(t){return N(this,void 0,void 0,(function*(){return(yield t.get({url:"/v3/auth/projects"})).data.projects}))}(this.client)}))}}W.type="identity";var J=function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function s(t){try{c(n.next(t))}catch(t){i(t)}}function a(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}c((n=n.apply(t,e||[])).next())}))};var K=function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function s(t){try{c(n.next(t))}catch(t){i(t)}}function a(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}c((n=n.apply(t,e||[])).next())}))};class Y extends T{constructor(t,e){super(t,e)}listKeyPairs(){return K(this,void 0,void 0,(function*(){return yield function(t){return J(this,void 0,void 0,(function*(){return(yield t.get({url:"/os-keypairs"})).data.keypairs.map(t=>t.keypair)}))}(this.client)}))}}Y.type="compute";var G=function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function s(t){try{c(n.next(t))}catch(t){i(t)}}function a(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}c((n=n.apply(t,e||[])).next())}))};var Z=function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function s(t){try{c(n.next(t))}catch(t){i(t)}}function a(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}c((n=n.apply(t,e||[])).next())}))};const Q=/([\w-]+\d+)\((\w+)\)/;class tt extends T{constructor(t,e){super(t,e)}listFlavors(t){return Z(this,void 0,void 0,(function*(){const e=yield function(t,e){return G(this,void 0,void 0,(function*(){const r=e?{availability_zone:e}:void 0;return(yield t.get({url:"/cloudservers/flavors",params:r})).data.flavors}))}(this.client,t);return t?e.filter(e=>e.os_extra_specs["cond:operation:az"].split(",").find(e=>{const r=e.match(Q);return!!r&&3===r.length&&r[1]===t&&"normal"===r[2]})):e}))}}function et(t){return t?`${t.operator}:${c(t.date)}`:t}function rt(t,e){const r=function(t){if(t)return{protected:t.protected,visibility:t.visibility,owner:t.owner,id:t.id,status:t.status,container_format:t.container_format,disk_format:t.disk_format,min_ram:t.min_ram,min_disk:t.min_disk,tag:t.tag,member_status:t.member_status,__os_type:t.os_type,__os_bit:t.os_bit,__platform:t.platform,__support_kvm:t.support_kvm,__support_xen:t.support_xen,__support_largememory:t.support_largememory,__support_diskintensive:t.support_diskintensive,__support_highperformance:t.support_highperformance,__support_xen_gpu_type:t.support_xen_gpu_type,__support_kvm_gpu_type:t.support_kvm_gpu_type,__support_xen_hana:t.support_xen_hana,__support_kvm_infiniband:t.support_kvm_infiniband,created_at:et(t.created_at),updated_at:et(t.updated_at)}}(e);return new k({url:"/v2/images",params:r},t)}tt.type="ecs";class nt extends T{constructor(t,e){super(C(t),e)}listImages(t){return rt(this.client,t||{})}}nt.type="image";var ot=r(15),it=r.n(ot),st=function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function s(t){try{c(n.next(t))}catch(t){i(t)}}function a(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}c((n=n.apply(t,e||[])).next())}))};var at=function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function s(t){try{c(n.next(t))}catch(t){i(t)}}function a(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}c((n=n.apply(t,e||[])).next())}))};var ct=function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function s(t){try{c(n.next(t))}catch(t){i(t)}}function a(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}c((n=n.apply(t,e||[])).next())}))};const ut=/^[\w\d.\-]{1,64}$/;var ft=function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function s(t){try{c(n.next(t))}catch(t){i(t)}}function a(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}c((n=n.apply(t,e||[])).next())}))};class ht extends T{constructor(t,e){super(t,e)}listVPCs(){return ft(this,void 0,void 0,(function*(){return yield function(t){return st(this,void 0,void 0,(function*(){return(yield t.get({url:"/vpcs"})).data.vpcs}))}(this.client)}))}createVPC(t){return ft(this,void 0,void 0,(function*(){const{id:e}=yield function(t,e){return st(this,void 0,void 0,(function*(){if(e.cidr&&!it()(e.cidr))throw Error("Invalid CIDR: "+e.cidr);return(yield t.post({url:"/vpcs",json:{vpc:e}})).data.vpc}))}(this.client,t);let r=yield this.getVPC(e);const n=()=>ft(this,void 0,void 0,(function*(){return r=yield this.getVPC(e),"OK"===r.status}));return(yield n())||(yield I(n,60)),r}))}getVPC(t){return ft(this,void 0,void 0,(function*(){return yield function(t,e){return st(this,void 0,void 0,(function*(){return(yield t.get({url:S("/vpcs",e)})).data.vpc}))}(this.client,t)}))}deleteVPC(t){return ft(this,void 0,void 0,(function*(){try{yield function(t,e){return st(this,void 0,void 0,(function*(){yield t.delete({url:S("/vpcs",e)})}))}(this.client,t)}catch(t){if(t instanceof b&&404===t.statusCode)return;throw t}yield $(()=>this.getVPC(t),60)}))}listSubnets(t){return ft(this,void 0,void 0,(function*(){return yield function(t,e){return at(this,void 0,void 0,(function*(){let r={};e&&(r={vpc_id:e});return(yield t.get({url:"/subnets",params:r})).data.subnets}))}(this.client,t)}))}getSubnet(t){return ft(this,void 0,void 0,(function*(){return yield function(t,e){return at(this,void 0,void 0,(function*(){return(yield t.get({url:S("/subnets",e)})).data.subnet}))}(this.client,t)}))}createSubnet(t){return ft(this,void 0,void 0,(function*(){const{id:e}=yield function(t,e){return at(this,void 0,void 0,(function*(){if(e.cidr&&!it()(e.cidr))throw Error("Invalid CIDR: "+e.cidr);return(yield t.post({url:"/subnets",json:{subnet:e}})).data.subnet}))}(this.client,t);let r=yield this.getSubnet(e);const n=()=>ft(this,void 0,void 0,(function*(){return r=yield this.getSubnet(e),"ACTIVE"===r.status}));return(yield n())||(yield I(n,120)),r}))}deleteSubnet(t,e){return ft(this,void 0,void 0,(function*(){let r;if(e)r=e;else{r=(yield this.getSubnet(t)).vpc_id}yield function(t,e,r){return at(this,void 0,void 0,(function*(){const n=S("/vpcs",e,"/subnets",r);yield t.delete({url:n})}))}(this.client,r,t),yield $(()=>this.getSubnet(t),120)}))}listSecurityGroups(t){return ft(this,void 0,void 0,(function*(){return t||(t={}),function(t,e){return ct(this,void 0,void 0,(function*(){return(yield t.get({url:"/security-groups",params:e})).data.security_groups}))}(this.client,t)}))}createSecurityGroup(t){return ft(this,void 0,void 0,(function*(){return function(t,e){return ct(this,void 0,void 0,(function*(){if(!e.name.match(ut))throw Error(`Invalid Security Group name: "${e.name}".\nThe value should be a string of 1 to 64 characters that can contain letters, digits, underscores (_), hyphens (-), and periods (.).`);return(yield t.post({url:"/security-groups",json:{security_group:e}})).data.security_group}))}(this.client,t)}))}deleteSecurityGroup(t){return ft(this,void 0,void 0,(function*(){return function(t,e){return ct(this,void 0,void 0,(function*(){yield t.delete({url:S("/security-groups",e)})}))}(this.client,t)}))}}ht.type="vpc";var pt=function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function s(t){try{c(n.next(t))}catch(t){i(t)}}function a(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}c((n=n.apply(t,e||[])).next())}))};class lt{constructor(t){this.region="eu-de",this.serviceMap=new Map,this.authOptions=t.auth,this.httpClient=new j({}),this.injectAuthToken(),this.registerService("identity",this.authOptions.auth_url)}set tokenID(t){this.authOptions.token=t}get tokenID(){return this.authOptions.token||""}get projectID(){return this.authOptions.project_id||""}set projectID(t){this.authOptions.project_id=t}get domainID(){return this.authOptions.domain_id||""}set domainID(t){this.authOptions.domain_id=t}registerService(t,e){this.serviceMap.set(t,e)}getService(t){const e=this.serviceMap.get(t.type);if(!e)throw Error(`Service '${t.type}' is not registered`);const r=new t(e,this.httpClient);return r.projectID=this.projectID,r}getIdentity(){return this.getService(W)}saveServiceCatalog(t){t.forEach(t=>{const e=t.endpoints.find(t=>(t.region===this.region||"*"===t.region)&&"public"===t.interface);e&&this.registerService(t.type,e.url)})}authAkSk(){return pt(this,void 0,void 0,(function*(){if(!this.authOptions.ak||!this.authOptions.sk)throw Error("Missing AK/SK: "+JSON.stringify(this.authOptions));this.httpClient.injectPreProcessor(O(this.authOptions.ak,this.authOptions.sk))}))}injectAuthToken(){this.httpClient.injectPreProcessor(t=>(this.tokenID&&t.headers.set("X-Auth-Token",this.tokenID),t))}authToken(){return pt(this,void 0,void 0,(function*(){const t=this.getIdentity();let e;if(this.tokenID?(this.injectAuthToken(),e=yield t.verifyToken(this.tokenID)):(e=yield t.issueToken(this.authOptions),this.tokenID=e.id,this.injectAuthToken()),e.project&&(this.projectID=e.project.id),this.domainID=e.user.domain.id,!e.catalog)throw Error("No service catalog provided");this.saveServiceCatalog(e.catalog)}))}authenticate(){return pt(this,void 0,void 0,(function*(){if(p()(this.authOptions))throw new Error("Missing auth options");this.authOptions.ak&&this.authOptions.sk?yield this.authAkSk():yield this.authToken()}))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,